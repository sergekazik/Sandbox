set ring_name "RingTEST-BLE"
set dev_mac "5A:C3:0A:B9:4B:FC"
set ringcrypto "./test_crypto"

spawn bluetoothctl
set blueID $spawn_id
expect "Agent registered"

puts "\n"
send "select 5C:F3:70:84:E8:8B\r"
send "devices\r"
send "list\r"
expect "Controller"
#send "remove $dev_mac\r"
#expect {
#    "Device has been removed" {}
#    "not available" {}
#}

set timeout 15
send "scan on\r"
expect "$dev_mac"
send "scan off\r"
expect "Discovery stopped"

set timeout 15

set device_connected 0
set timeout 20
send "connect $dev_mac\r"
expect {
    "Failed to connect:"	{
	puts "\nfailed to connect\n\n"
    }
    "not available" 		{
	puts "\n\ndevice went offline or removed from the list, abort.\n\n"
    }
    "ServicesResolved: yes"	{
	set device_connected 1
    }
     timeout    		{
	puts "\n\nconnect timeout...\n\n"
    }
}

if { $device_connected == 0 } {
    puts "failed to connect $ring_name, exiting 10\n"
    send "quit\n"
    exit 10
}
send "select-attribute /org/bluez/hci0/dev_5A_C3_0A_B9_4B_FC/service0001/char0004\r"
send "read\r"
expect {
	"Value:" {
	}
	"No attribute selected" {
	    puts "\nsomething failed\n\n"
	    exit 666
	}
}
send "attribute-info\r"
expect "Value:"
expect  $ring_name

puts "\r"
#puts "------------------------------\r"
#puts $expect_out(buffer);
puts "==============================\r"
set buf [split $expect_out(buffer) "\n"]
set pld ""
set public_payload "public_payload.log"
set outFileId [open $public_payload "w"]
for {set idx 0} {$idx<100} {incr idx} {
    set pubpl [lindex $buf $idx]
    if {[string match "*list*" $pubpl]} {
	break
    }
    if {[string match "*$ring_name*" $pubpl]} {
	break
    }
    if {[string match "*$ring_mane*" $pubpl]} {
	break
    }
    append pld '\n $pubpl
    puts $outFileId "$pubpl"
}
#puts "$pld"
close $outFileId
puts "-------------------------------\r"


#---------------------- now let's write the gpk
puts "\r"
spawn $ringcrypto -gpk
expect ":gpk"
#puts $expect_out(buffer)
set buf [split $expect_out(buffer) ":"]
set gpk [lindex $buf 1]
#puts "gpk = $gpk\r"

set spawn_id $blueID
send "select-attribute /org/bluez/hci0/dev_5A_C3_0A_B9_4B_FC/service0001/char0002\r"

send "write $gpk\r"
set timeout 3
expect {
    timeout {}
}
set timeout 20

#-now let's re-read PAYLOAD - should be proper one
send "select-attribute /org/bluez/hci0/dev_5A_C3_0A_B9_4B_FC/service0001/char0004\r"
send "read\r"
expect "Value:"
send "attribute-info\r"
expect "Value:"
expect  $ring_name

#--- here parse the actual value and pass it to test_crypto for update
puts "\r"
#puts "------------------------------\r"
#puts $expect_out(buffer);
puts "==============================\r"
set buf [split $expect_out(buffer) "\n"]
set pld ""
set public_payload "public_payload.log"
set outFileId [open $public_payload "w"]
for {set idx 0} {$idx<100} {incr idx} {
    set pubpl [lindex $buf $idx]
    if {[string match "*list*" $pubpl]} {
	break
    }
    if {[string match "*$ring_name*" $pubpl]} {
	break
    }
    if {[string match "*$ring_mane*" $pubpl]} {
	break
    }
    append pld '\n $pubpl
    puts $outFileId "$pubpl"
}
#puts "$pld"
close $outFileId

puts "\r"
spawn $ringcrypto -ppf public_payload.log
expect {
    ":ppp" {
	puts "Public Payload processed OK"
    }
    "Error" {
	puts "Public Payload Error. Abort"
	set spawn_id $blueID
	send "disconnect"
	expect "Connected: no"
	send "quit\r"
	exit -18
    }
}

spawn $ringcrypto -enc 91324
expect ":enc"
#puts $expect_out(buffer)
set buf [split $expect_out(buffer) ":"]
set zip [lindex $buf 2]
puts "zip = $zip"

set spawn_id $blueID
send "select-attribute /org/bluez/hci0/dev_5A_C3_0A_B9_4B_FC/service0001/char0012\r"
send "write $zip\r"

set timeout 3
expect {
    timeout {}
}
set timeout 20

send "select-attribute /org/bluez/hci0/dev_5A_C3_0A_B9_4B_FC/service0001/char0006\r"
send "read\r"
expect "Value:"
send "attribute-info\r"
expect "Value:"
expect  $ring_name

puts "disconnecting....."
send "disconnect\r"
expect "Connected: no"
send "quit\r"

